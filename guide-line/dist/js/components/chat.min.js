function Chat(a){this.socket=a.socket||null,this._connect=a.onConnect||function(){},this._disconnect=a.onDisconnect||function(){},this.socket&&(this.init(),this.model.init())}Chat.prototype.init=function(){this._bindEvents()},Chat.prototype._bindEvents=function(){this.socket.on("connect",this.socketOnConnet.bind(this)),this.socket.on("disconnect",this.socketOnDisconnet.bind(this)),this.socket.on("message",this.socketOnMessage.bind(this)),this.socket.on("userConnected",this.socketOnUserConnected.bind(this)),this.socket.on("userDisconnected",this.socketOnUserDisconnected.bind(this))},Chat.prototype._message=function(a){this.model.addMessage(a)},Chat.prototype._userConnected=function(a){this.model.addUser(a)},Chat.prototype._userDisconnected=function(a){this.model.deleteUser(a)},Chat.prototype.addUser=function(a,b){this.socket.emit("addUser",a,b)},Chat.prototype.send=function(a,b){this.socket.emit("message",a,b)},Chat.prototype.socketOnConnet=function(){this._connect()},Chat.prototype.socketOnDisconnet=function(){this._disconnect()},Chat.prototype.socketOnMessage=function(a){this._message(a)},Chat.prototype.socketOnUserConnected=function(a){this._userConnected(a)},Chat.prototype.socketOnUserDisconnected=function(a){this._userDisconnected(a)};